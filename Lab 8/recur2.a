## Start of file recur2.a
## MIPSMARK 1.0 1/5/98 Copyright 1998 J. Waldron.
##
## Question:
##
## Write a function named search that will
## search for a node whose name matchs a desired string
## in a binary search tree.
## The string to be found will be input, or supplied by mipsmark.
##
## A search tree has the property that the left subtree
## of any node has entries that are "less" than the current
## node, and likewise the right subtree's entries are
## "greater", in this case by alphabetic ordering.
##
##  I have attempted to make the tree defined in this
##  data segment such a tree.
##
## The parameters to search are a pointer to the
## tree, a pointer to the string being sought,
## and the current depth. On each recursive
## call add 1 to the depth. This parameter is
## used to keep track of the path from the root
## to the marked node; as you visit a node, you
## will call a procedure named store_path to
## record the fact that you have visited this
## node. The code for store_path and print_path
## (called after you get back from the procedure)
## have been written for you -- all you need to
## do is understand how to set up the parameters
## for store_path and make the call.
##
## The code for search could look like:
##
##           call store_path
##           if (Name == seek)
##             return Value       #TRUE, found it
##           if (seek < Name) AND (left tree exists)
##             return search(left tree, depth+1, seek)
##           else if (right tree exists)
##             return search(right tree, depth+1, seek)
##           return 0
##
## You also need a function to COMPARE 2 STRINGS
##
## Output format should follow the pattern:
## "peach-->avocado-->cantaloupe-->orange-->passion 80"
## or "cherry not found"
## Output format for this file's data must be:
## "peach-->pineapple-->pear 40"
## And case0 output should be:
## "peach 10"


#################################################
#					 	#
#		text segment			#
#						#
#################################################

	.text		
       	.globl __start 
__start:		# execution starts here

#  INPUT A STRING TO SEARCH FOR 
	la	$a0, prompt
	li	$v0, 4		#print a prompt
	syscall

	la	$a0, seek	#space to store seek string
	li	$a1, 30		#limit of space
	move	$a2, $a0	#pass seek to search
	li	$v0, 8
	syscall			# read input
	jal	chomp		# remove newline char
#   (pass it also as an argument in $a2)

	move	$s0,$a2 #save search string for printing

        la $a0,tree
        li $a1,0
        jal search      # search the tree  <<===== YOU
        move  $s1,$v0   # save value

        jal print_path  # print the path to the node found
        la $a0,space    # .. or even if not, for debugging
        li $v0,4
        syscall         # print a space
	beqz  $s1, _not_found
# found!
        move  $a0,$s1
        li $v0,1
        syscall         # print value (price of fruit)
        la $a0,endl
        li $v0,4
        syscall         # print newline
	b  _exit
# --- or else print ("not found")
_not_found:
        move $a0,$s0
        li $v0,4
        syscall         # print search string
        la $a0,notfound
        li $v0,4
        syscall         # print " not found\n"

_exit:
        li $v0,10
        syscall         # au revoir....


#------------------------------------------------
# store_path - store pointer at level n in the path
#       a0 - holds pointer to string
#       a1 - level to use in path
#------------------------------------------------
store_path:
        sll $t0,$a1,2   # each pointer is 4 bytes
        sw $a0,path($t0)# save pointer to the name
        addi $t0,$t0,4  # make the next entry
        sw $0,path($t0) #  equal to 0.
        jr $ra


#------------------------------------------------
# print_path() - print the items stored in path
#------------------------------------------------
print_path:
        li $t0,0        # i
        sll $t1,$t0,2   # each pointer is 4 bytes
        lw $a0,path($t1)
next:   li $v0,4
        syscall         # print path[i]
        addi $t0,$t0,1  # i++
        sll $t1,$t0,2   # each pointer is 4 bytes
        lw $a0,path($t1)
        beqz $a0,done
        move $t1,$a0
        la $a0,arrow
        li $v0,4
        syscall         # print "-->"
        move $a0,$t1
        b next
done:
        jr $ra

chomp:			# remove newline from end of string
	move $t0, $a0
chloop: lb   $t1, ($t0)
	beqz $t1, chend		# there wasn't a newline
	beq  $t1, 10,chopitoff	# '\n' is 10
	add  $t0, $t0, 1	#keep checking
	b    chloop
chopitoff:
	sb   $0, ($t0)  #replace with \0, ending string
chend:  jr   $ra

# Any changes above this line will be discarded by
# mipsmark. Put your answer between dashed lines.
#-------------- start cut -----------------------

##    <Acct, Your Name>


#--------------  end cut  -----------------------
# Any changes below this line will be discarded by
# mipsmark. Put your answer between dashed lines.

#################################################
#                                               #
#               data segment                    #
#                                               #
#################################################

        .data
# The binary tree.  Note that each node has four
# words -- a pointer to the name, pointers to
# left and right subtrees, and the integer
# value field, in this case value could be the
# price of one fruit

path:   .space 40

tree:   .word name5, node1, node2, 10
node1:  .word name11, node3, node4, 15
node2:  .word name7, node5, node6, 8
node3:  .word name17, node7, 0, 30
node4:  .word name15, node8, node9, 20
node5:  .word name3, 0, 0, 40
node6:  .word name12, node10, node11, 50
node7:  .word name0, 0, 0, 230
node8:  .word name2, 0, 0, 30
node9:  .word name1, node12, node13, 4
node10: .word name4, 0, 0, 70
node11: .word name16, 0, 0, 60
node12: .word name8, node14, node15, 90
node13: .word name14, 0, 0, 80
node14: .word name9, 0, 0, 91
node15: .word name10, node16, node17, 97
node16: .word name13, 0, 0, 130
node17: .word name6, 0, 0, 35

name0:  .asciiz "apple"
name1:  .asciiz "orange"
name2:  .asciiz "bananna"
name3:  .asciiz "pear"
name4:  .asciiz "plum"
name5:  .asciiz "peach"
name6:  .asciiz "nectarine"
name7:  .asciiz "pineapple"
name8:  .asciiz "grapefruit"
name9:  .asciiz "grape"
name10: .asciiz "melon"
name11: .asciiz "avocado"
name12: .asciiz "star"
name13: .asciiz "mango"
name14: .asciiz "passion"
name15: .asciiz "cantaloupe"
name16: .asciiz "watermelon"
name17: .asciiz "apricot"

endl:   .asciiz "\n"
arrow:  .asciiz "-->"
notfound: .asciiz " not found\n"
space:	.asciiz	" "
seek:   .asciiz "pear"
	.space  30      # to store string that is sought
prompt: .asciiz "What to search for? "

##
## End of file recur2.a
